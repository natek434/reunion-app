"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";
import ReactDOM from "react-dom";
import ReactFlow, {
  Controls,
  MiniMap,
  Node,
  Edge,
  Handle,
  Position,
  ReactFlowProvider,
  useReactFlow,
  MarkerType,
} from "reactflow";
import "reactflow/dist/style.css";
import { graphlib, layout as dagreLayout } from "@dagrejs/dagre";
import { toast } from "sonner";

/* ---------- Types ---------- */
type Gender = "MALE" | "FEMALE" | "OTHER" | "UNKNOWN";
type ParentKind = "BIOLOGICAL" | "WHANGAI";

type GNode = {
  id: string;
  label: string;
  imageUrl?: string | null;
  gender?: Gender;
  locked?: boolean;
  birthDate?: string | null;
  notes?: string | null;
};
type GEdge = {
  id: string;
  source: string;
  target: string;
  type: "parent";
  role?: "MOTHER" | "FATHER" | "PARENT";
  kind?: ParentKind;
};

type ViewKind = "BIOLOGICAL" | "WHANGAI" | "ALL";
type ViewMode = "GRAPH" | "ANCESTORS";
type Side = "MATERNAL" | "PATERNAL" | "BOTH";

/* ---------- Node sizing ---------- */
const NODE_W = 220;
const NODE_H = 72;

/* ---------- Palette (light/dark friendly) ---------- */
const COLOR = {
  gender: {
    MALE: "#3b82f6",      // blue-500
    FEMALE: "#ec4899",    // pink-500
    OTHER: "#a78bfa",     // violet-400/500
    UNKNOWN: "#94a3b8",   // slate-400
  },
  edge: {
    biological: "#94a3b8",
    whangai: "#f59e0b",
    highlight: "#3b82f6",
  },
  chipLockBg: (accent: string) => `color-mix(in oklab, ${accent} 16%, transparent)`,
  chipLockFg: (accent: string) => `color-mix(in oklab, ${accent} 90%, #111)`,
};

/* ---------- Hover card rendered in a portal ---------- */
function HoverCardPortal({
  anchorRect,
  data,
}: {
  anchorRect: DOMRect | null;
  data: GNode & { isMe?: boolean };
}) {
  if (!anchorRect || typeof window === "undefined") return null;
  const style: React.CSSProperties = {
    position: "fixed",
    top: anchorRect.top - 8,
    left: anchorRect.right + 8,
    width: 260,
    background: "rgba(255,255,255,.97)",
    backdropFilter: "blur(6px)",
    border: "1px solid var(--border)",
    borderRadius: 12,
    boxShadow: "0 10px 30px rgba(0,0,0,.12)",
    padding: 12,
    zIndex: 999999,
    pointerEvents: "none",
  };
  return ReactDOM.createPortal(
    <div style={style}>
      <div className="font-semibold mb-1" style={{ color: "var(--foreground)" }}>
        {data.label} {data.isMe ? <span className="text-xs text-blue-600/80">(me)</span> : null}
      </div>
      <dl className="space-y-1 text-[12px]" style={{ color: "var(--muted-foreground)" }}>
        {data.birthDate && (
          <div className="flex justify-between">
            <dt>Born</dt>
            <dd>{new Date(data.birthDate).toLocaleDateString()}</dd>
          </div>
        )}
        {data.notes && <div className="mt-1">{data.notes}</div>}
      </dl>
    </div>,
    document.body
  );
}

/* ---------- Gendered person node ---------- */
function PersonNode({ data }: { data: GNode & { isMe?: boolean; highlighted?: boolean } }) {
  const initial = (data.label || "?").charAt(0).toUpperCase();
  const wrapRef = useRef<HTMLDivElement | null>(null);
  const [hoverRect, setHoverRect] = useState<DOMRect | null>(null);

  const accent =
    COLOR.gender[(data.gender || "UNKNOWN") as keyof typeof COLOR.gender] || COLOR.gender.UNKNOWN;

  // Show birthdate if present, otherwise a notes snippet
  const dob = data.birthDate ? new Date(data.birthDate).toLocaleDateString() : null;
  const subline = dob ?? (data.notes || "");

  const borderColor =
    data.highlighted ? COLOR.edge.highlight : data.isMe ? "#22c55e" : data.locked ? "#f59e0b" : "var(--border)";
  const ringShadow =
    data.highlighted
      ? "0 0 0 2px rgba(59,130,246,.35)"
      : data.isMe
      ? "0 0 0 2px rgba(34,197,94,.35)"
      : undefined;

  return (
    <>
      <div
        ref={wrapRef}
        className="rounded-xl border shadow-sm"
        style={{
          width: NODE_W,
          height: NODE_H,
          background: "var(--card)",
          borderColor,
          boxShadow: ringShadow,
          display: "flex",
          alignItems: "center",
          gap: 12,
          padding: 10,
          position: "relative",
        }}
        onMouseEnter={() => setHoverRect(wrapRef.current?.getBoundingClientRect() || null)}
        onMouseLeave={() => setHoverRect(null)}
      >
        {/* gender accent rail */}
        <span
          aria-hidden
          style={{
            position: "absolute",
            inset: "0 auto 0 0",
            width: 4,
            borderRadius: "12px 0 0 12px",
            background: accent,
          }}
        />

        {/* reactflow handles */}
        <Handle id="from-parent" type="target" position={Position.Top} style={{ background: "#64748b" }} />
        <Handle id="to-child" type="source" position={Position.Bottom} style={{ background: "#64748b" }} />

        {/* avatar */}
        {data.imageUrl ? (
          <img
            src={data.imageUrl}
            alt=""
            className="h-9 w-9 rounded-full object-cover border"
            style={{
              boxShadow: `0 0 0 2px color-mix(in oklab, ${accent} 55%, transparent)`,
              borderColor: `color-mix(in oklab, ${accent} 35%, var(--border))`,
            }}
          />
        ) : (
          <div
            className="h-9 w-9 rounded-full grid place-items-center text-sm border"
            style={{
              background: "rgba(0,0,0,.06)",
              color: "var(--foreground)",
              boxShadow: `0 0 0 2px color-mix(in oklab, ${accent} 40%, transparent)`,
              borderColor: `color-mix(in oklab, ${accent} 35%, var(--border))`,
            }}
          >
            {initial}
          </div>
        )}

        {/* text */}
        <div className="min-w-0">
          <div className="truncate font-medium" style={{ color: "var(--card-foreground)" }}>
            {data.label}
          </div>
          <div className="text-[11px]  truncate flex items-center gap-1">
            {subline}
            {data.locked && (
              <span
                className="ml-1"
                style={{
                  fontSize: 10,
                  padding: "2px 6px",
                  borderRadius: 9999,
                  background: COLOR.chipLockBg(accent),
                  color: COLOR.chipLockFg(accent),
                }}
              >
                locked
              </span>
            )}
          </div>
        </div>
      </div>

      {hoverRect ? <HoverCardPortal anchorRect={hoverRect} data={data} /> : null}
    </>
  );
}
const nodeTypes = { person: PersonNode };

/* ---------- Layout (dagre) ---------- */
function layoutGraph(nodes: Node[], edges: Edge[]) {
  const g = new graphlib.Graph();
  g.setGraph({
    rankdir: "TB",
    nodesep: 80,
    ranksep: 160,
    marginx: 24,
    marginy: 24,
  });
  g.setDefaultEdgeLabel(() => ({}));

  const parentEdges = edges.filter((e) => (e.data as any)?.type === "parent");
  nodes.forEach((n) => g.setNode(n.id, { width: NODE_W, height: NODE_H }));
  parentEdges.forEach((e) => g.setEdge(e.source, e.target));
  dagreLayout(g);

  return nodes.map((n) => {
    const pos = g.node(n.id) as { x: number; y: number };
    return { ...n, position: { x: pos.x - NODE_W / 2, y: pos.y - NODE_H / 2 }, draggable: false };
  });
}

/* ---------- Helpers ---------- */

// Build simple maps (child -> parents[]), (parent -> children[])
function buildMaps(edges: GEdge[]) {
  const parentsOf = new Map<string, Array<{ id: string; role?: GEdge["role"] }>>();
  const childrenOf = new Map<string, string[]>();
  for (const e of edges) {
    if (e.type !== "parent") continue;
    if (!parentsOf.has(e.target)) parentsOf.set(e.target, []);
    parentsOf.get(e.target)!.push({ id: e.source, role: e.role });
    if (!childrenOf.has(e.source)) childrenOf.set(e.source, []);
    childrenOf.get(e.source)!.push(e.target);
  }
  return { parentsOf, childrenOf };
}

// Walk strictly maternal/paternal line upwards
function walkLineage(
  startId: string,
  parentsOf: Map<string, Array<{ id: string; role?: GEdge["role"] }>>,
  which: "MOTHER" | "FATHER"
) {
  const nodes: string[] = [startId];
  const edges: Array<{ from: string; to: string }> = [];
  let cur = startId;
  const seen = new Set([startId]);

  while (true) {
    const ps = parentsOf.get(cur) || [];
    const pref = ps.find((p) => p.role === which) || ps.find((p) => p.role === "PARENT");
    if (!pref) break;
    if (seen.has(pref.id)) break;
    nodes.push(pref.id);
    edges.push({ from: pref.id, to: cur });
    seen.add(pref.id);
    cur = pref.id;
  }
  return { nodes: new Set(nodes), edges: new Set(edges.map((e) => `${e.from}->${e.to}`)) };
}

// WHĀNGAI-FIRST SELECTOR (per-role)
function selectEdgesForView(raw: GEdge[], viewKind: ViewKind): GEdge[] {
  if (viewKind === "ALL") return raw;

  const groups = new Map<string, GEdge[]>();
  for (const e of raw) {
    if (e.type !== "parent") continue;
    const role = (e.role as any) || "PARENT";
    const key = `${e.target}::${role}`;
    if (!groups.has(key)) groups.set(key, []);
    groups.get(key)!.push(e);
  }

  const out: GEdge[] = [];
  for (const list of groups.values()) {
    if (viewKind === "WHANGAI") {
      const chosen =
        list.find((x) => (x.kind ?? "BIOLOGICAL") === "WHANGAI") ??
        list.find((x) => (x.kind ?? "BIOLOGICAL") === "BIOLOGICAL") ??
        null;
      if (chosen) out.push(chosen);
    } else {
      const chosen = list.find((x) => (x.kind ?? "BIOLOGICAL") === "BIOLOGICAL") ?? null;
      if (chosen) out.push(chosen);
    }
  }
  return out;
}

// Build map child -> [{ parentId, role }]
function buildParentsMapKindAware(edges: GEdge[]) {
  const map = new Map<string, Array<{ parentId: string; role?: GEdge["role"] }>>();
  for (const e of edges) {
    if (e.type !== "parent") continue;
    if (!map.has(e.target)) map.set(e.target, []);
    map.get(e.target)!.push({ parentId: e.source, role: e.role });
  }
  return map;
}

// Ancestors ascent for one or both sides
function ascendLine(
  startId: string,
  parentsOf: Map<string, Array<{ parentId: string; role?: GEdge["role"] }>>,
  which: "MOTHER" | "FATHER" | "ANY",
  maxDepth = 12
) {
  const nodes = new Set<string>([startId]);
  const edges = new Set<string>();
  let cur = startId;
  let depth = 0;
  while (depth < maxDepth) {
    const ps = parentsOf.get(cur) || [];
    const pref =
      which === "ANY"
        ? ps.find((p) => p.role === "MOTHER") || ps.find((p) => p.role === "FATHER") || ps[0]
        : ps.find((p) => p.role === which);
    if (!pref) break;
    nodes.add(pref.parentId);
    edges.add(`${pref.parentId}->${cur}`);
    cur = pref.parentId;
    depth++;
  }
  return { nodes, edges };
}

/* ---------- Edge styling helpers ---------- */
const edgeStyleFor = (isWhangai: boolean, hi: boolean) => {
  const color = hi
    ? COLOR.edge.highlight
    : isWhangai
    ? COLOR.edge.whangai
    : COLOR.edge.biological;
  return {
    stroke: color,
    strokeWidth: hi ? 3 : 1.8,
    strokeDasharray: isWhangai && !hi ? "6 3" : undefined,
    strokeLinecap: "round" as const,
    strokeOpacity: hi ? 1 : 0.95,
  };
};

const makeEdges = (list: GEdge[], hiEdges: Set<string>, viewFilter?: { edges: Set<string> }): Edge[] => {
  const edges = list.map((e) => {
    const isWhangai = e.kind === "WHANGAI";
    const hi = hiEdges.has(`${e.source}->${e.target}`);
    const style = edgeStyleFor(isWhangai, hi);
    return {
      id: e.id,
      source: e.source,
      target: e.target,
      type: "smoothstep",
      data: { type: "parent", role: e.role },
      style,
      markerEnd: { type: MarkerType.ArrowClosed, color: style.stroke as string },
    } as Edge;
  });
  return viewFilter ? edges.filter((e) => viewFilter.edges.has(`${e.source}->${e.target}`)) : edges;
};

/* ---------- Canvas ---------- */
function GraphCanvas({
  nodes,
  edges,
  onNodeClick,
}: {
  nodes: Node[];
  edges: Edge[];
  onNodeClick: (id: string) => void;
}) {
  const { fitView } = useReactFlow();
  const TREE_SVG = `
  <svg xmlns="http://www.w3.org/2000/svg" width="3000" height="3000" viewBox="0 0 3000 3000">

<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 1505.589844 1290.070312 C 1515.671875 1306.941406 1527.789062 1320.519531 1539.449219 1336.101562 C 1553.28125 1354.570312 1566.210938 1374.199219 1576.039062 1395.109375 C 1589.769531 1424.320312 1588.910156 1456.050781 1578.140625 1485.890625 C 1565.921875 1519.730469 1543.5 1546.929688 1521.429688 1574.640625 C 1517.070312 1580.101562 1512.191406 1589.53125 1505.859375 1592.480469 L 1501.769531 1590.089844 C 1492.308594 1581.480469 1484.269531 1571.359375 1476 1561.621094 C 1448.28125 1528.96875 1420.800781 1488.410156 1417.261719 1444.46875 C 1413.640625 1399.53125 1447.589844 1363.78125 1473.589844 1331.230469 Z M 1505.589844 1290.070312 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 2150.570312 1538.460938 C 2174.050781 1535.328125 2198.738281 1539.390625 2221.691406 1544.480469 C 2245.449219 1549.75 2268.601562 1555.371094 2291.75 1562.960938 L 2339.929688 1580.019531 C 2300.078125 1602.308594 2274.878906 1632.019531 2249.75 1669.25 C 2239.429688 1684.53125 2230.351562 1698.859375 2216.921875 1711.730469 C 2192.109375 1735.519531 2159.421875 1742.378906 2126 1741.628906 C 2096.648438 1738.75 2072.050781 1731.179688 2047.121094 1715.03125 C 2038.058594 1709.171875 2029.898438 1701.910156 2020.019531 1697.371094 C 1993.011719 1684.988281 1965.320312 1682.078125 1945.359375 1658.140625 C 1965.390625 1663.699219 1986.609375 1671.488281 2007.75 1668.269531 C 2051.398438 1661.609375 2051.648438 1614.640625 2071.808594 1585.589844 C 2091.269531 1557.539062 2117.878906 1544.660156 2150.570312 1538.460938 Z M 2150.570312 1538.460938 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 798.4375 1537.191406 C 835.574219 1531.75 873.488281 1538.488281 903.320312 1561.511719 C 912.210938 1568.359375 919.785156 1574.570312 925.832031 1584.230469 C 943.765625 1612.871094 944.523438 1646.109375 976.609375 1664.570312 C 1003.039062 1679.78125 1033.441406 1665.320312 1059.921875 1658 C 1046.988281 1672.261719 1027.460938 1683.988281 1009.28125 1690.261719 C 1000.660156 1693.230469 991.261719 1695.308594 983.28125 1699.808594 C 962.203125 1711.710938 945.039062 1728.570312 922.210938 1737.808594 C 911.015625 1740.621094 900.636719 1743.441406 889.160156 1745.039062 C 840.519531 1751.839844 793.304688 1732.660156 765.183594 1692.371094 C 749.558594 1669.988281 738.386719 1645.890625 719.96875 1625.289062 C 702.125 1605.328125 679.574219 1594.371094 658.1875 1579.378906 C 661.019531 1578.03125 659.90625 1578.441406 662.535156 1577.589844 C 677.722656 1572.621094 691.582031 1565.339844 706.386719 1559.578125 C 734.949219 1548.460938 768.039062 1540.460938 798.4375 1537.191406 Z M 798.4375 1537.191406 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 2126.628906 503.179688 L 2131.46875 503.179688 C 2131.980469 509.21875 2127.851562 517.199219 2126.109375 523.140625 C 2122.949219 533.871094 2119.929688 544.96875 2117.949219 555.960938 C 2114.28125 576.449219 2112.660156 598.851562 2112.578125 619.628906 C 2112.519531 639.238281 2114.359375 660.25 2117.058594 679.691406 C 2119.878906 700.019531 2124.261719 721.511719 2122.988281 742.109375 C 2120.570312 781.128906 2092.71875 821.128906 2061.949219 843.480469 C 2054.730469 848.730469 2046.679688 852.460938 2039.058594 857.058594 C 2017.820312 869.878906 1995.121094 884.789062 1977.789062 902.699219 C 1969.921875 910.820312 1963.890625 921.789062 1957.769531 931.300781 C 1957.96875 920.320312 1955.78125 910.941406 1953.191406 900.351562 L 1916.820312 815.269531 C 1905.328125 781.238281 1902.558594 744.890625 1913.019531 710.191406 C 1916.390625 699.03125 1922.109375 688.050781 1927.289062 677.609375 C 1935.109375 661.871094 1945.410156 648.75 1956.558594 635.28125 C 1991.390625 593.179688 2037.039062 558.148438 2082.511719 528.269531 C 2096.21875 519.269531 2111.039062 508.398438 2126.628906 503.179688 Z M 2126.628906 503.179688 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 1466.199219 139.660156 C 1478.71875 180.089844 1490.289062 220.53125 1507.320312 259.371094 L 1549.050781 349.660156 C 1556.519531 366.910156 1565.089844 385.46875 1568.5 404.050781 C 1575.160156 440.320312 1559.980469 477.730469 1538.5 506.300781 C 1518.949219 532.300781 1496.601562 555.308594 1483.148438 585.511719 C 1477.648438 597.871094 1474.328125 612.460938 1472.078125 625.78125 L 1471.769531 627.691406 L 1469.96875 628.429688 L 1466.988281 624.390625 C 1455.691406 613.320312 1442.390625 604.949219 1429.738281 595.53125 C 1404.628906 576.851562 1383.609375 556.871094 1369.921875 528.359375 C 1324.710938 434.238281 1395.398438 346.96875 1428.558594 262.148438 C 1439.410156 234.390625 1448.308594 204.640625 1456.269531 175.921875 C 1459.671875 163.671875 1461.921875 151.761719 1466.199219 139.660156 Z M 1466.199219 139.660156 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 870.550781 499.769531 L 880.761719 503.558594 C 894.242188 509.480469 907.480469 519.289062 920.128906 527.050781 C 988.851562 569.199219 1062.578125 626.5 1092.191406 704.328125 C 1107.121094 743.589844 1106.890625 787.578125 1092.019531 826.890625 C 1083.160156 850.300781 1070.488281 872.089844 1060.140625 894.890625 C 1055.890625 905.75 1053.941406 916.230469 1051.800781 927.640625 C 1039.039062 911.988281 1025.25 893.980469 1008.359375 882.691406 C 999.453125 876.738281 988.878906 872.710938 979.246094 867.980469 C 960.753906 858.910156 941.863281 847.75 925.78125 834.878906 C 918.5625 829.109375 900.550781 813.378906 897.582031 804.480469 C 895.503906 798.230469 891.476562 792.75 888.425781 786.921875 C 884.644531 779.691406 882.332031 771.921875 880.859375 763.929688 C 875.40625 734.359375 882.085938 702.988281 886.183594 673.609375 C 891.339844 636.640625 893.40625 599.308594 887.125 562.308594 C 883.515625 541.011719 876.914062 520.359375 870.550781 499.769531 Z M 870.550781 499.769531 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 2505.070312 1295.609375 L 2701.121094 1297.421875 C 2691.390625 1305.679688 2678.019531 1310.859375 2667.449219 1318.378906 C 2635.371094 1341.191406 2621.390625 1378.53125 2606.320312 1413.359375 C 2585.578125 1461.269531 2556.339844 1512.460938 2504.628906 1532.261719 C 2461.941406 1548.609375 2423.089844 1549.980469 2380.871094 1531.421875 L 2340.308594 1506.339844 C 2329.210938 1499.109375 2317.160156 1492.359375 2304.101562 1489.398438 C 2276.789062 1483.210938 2241.269531 1491.609375 2214.109375 1497.058594 C 2203.339844 1499.210938 2193.46875 1502.941406 2183.179688 1506.738281 C 2194.609375 1498.160156 2206.699219 1491.121094 2218.488281 1483.160156 L 2275.019531 1446.320312 C 2293.351562 1435.328125 2315.519531 1428.140625 2330.988281 1413.128906 C 2350.601562 1394.109375 2361.808594 1366.609375 2380.429688 1346.398438 C 2415.601562 1308.261719 2454.820312 1297.820312 2505.070312 1295.609375 Z M 2505.070312 1295.609375 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 306.695312 1298.589844 C 322.265625 1296.878906 339.191406 1301.640625 354.984375 1302.179688 L 456.578125 1301.230469 C 523.582031 1299.898438 599.898438 1309.191406 640.539062 1369.359375 C 653.246094 1388.179688 666.457031 1412.199219 685.546875 1425.328125 C 698.15625 1434 717.042969 1438.601562 731.269531 1444.789062 C 753.347656 1454.390625 777.6875 1466.441406 797.355469 1480.371094 C 805.140625 1485.871094 811.945312 1492.691406 819.578125 1498.398438 C 826.378906 1503.480469 833.6875 1506.988281 839.878906 1512.929688 C 822.316406 1507.550781 806.246094 1497.03125 788.421875 1491.121094 C 747.851562 1477.941406 711.625 1480.710938 677.488281 1507.601562 C 654.0625 1526.058594 635.96875 1543.269531 606.265625 1551.96875 C 577.339844 1560.449219 546.738281 1559.609375 518.085938 1550.449219 C 496.25 1543.480469 478.382812 1532.398438 461.117188 1517.371094 C 449.6875 1507.429688 438.753906 1496.820312 430.3125 1484.148438 C 398.136719 1435.859375 387.449219 1373.351562 346.796875 1330.871094 C 335.78125 1319.359375 321.0625 1310.28125 307.164062 1302.691406 Z M 306.695312 1298.589844 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 1739.609375 451.910156 L 1742.738281 452.699219 C 1728.320312 478.878906 1719.109375 505.011719 1714.75 534.621094 C 1709.710938 568.910156 1709.140625 601.691406 1696.921875 634.75 C 1679.300781 682.460938 1645.019531 706.609375 1598.300781 721.578125 C 1586.488281 725.359375 1573.421875 727.160156 1562.25 732.609375 C 1552.109375 737.558594 1541.058594 747.058594 1536.03125 757.21875 C 1524.070312 781.339844 1523.859375 812.519531 1517.898438 838.511719 C 1512.660156 861.328125 1504.511719 883.621094 1497.898438 906.078125 C 1492.898438 923.078125 1489.5 940.488281 1483.480469 957.160156 C 1478.699219 925.621094 1490.878906 894.96875 1476.359375 864.679688 C 1468.808594 848.921875 1455.199219 834.53125 1437.75 830.191406 C 1430.128906 828.289062 1421.320312 828.691406 1413.5 828.410156 C 1393.929688 827.710938 1373.710938 828.050781 1354.980469 821.519531 C 1334.730469 814.449219 1315.328125 802.230469 1299.679688 787.660156 C 1286.570312 775.460938 1275.019531 761.941406 1266.730469 745.960938 C 1248.449219 710.738281 1244.019531 670.460938 1226.578125 634.609375 C 1212.929688 609.941406 1199.519531 592.929688 1177.589844 575.398438 L 1179.78125 574.53125 C 1188.359375 572.160156 1199.210938 572.039062 1208.191406 571.109375 C 1266.488281 565.03125 1326.519531 570.101562 1379.929688 595.589844 C 1395.988281 603.25 1409.949219 614.550781 1423.058594 626.390625 C 1467.429688 666.460938 1474.898438 719.578125 1479.53125 775.988281 C 1481.5 800 1482.648438 821.359375 1490.449219 844.390625 C 1497.78125 816.671875 1502.039062 790.789062 1500.039062 762 L 1495.421875 722.960938 C 1492.949219 689.609375 1491.691406 650.070312 1501.058594 617.660156 C 1508.429688 592.191406 1523.308594 569.078125 1540.5 549.171875 C 1553.910156 533.640625 1568.949219 516.898438 1585.191406 504.339844 C 1627.980469 471.230469 1686.390625 455.789062 1739.609375 451.910156 Z M 1739.609375 451.910156 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 755.042969 709.601562 C 765.394531 710 775.28125 710.640625 785.378906 713.191406 C 807.40625 718.769531 828.890625 733.308594 839.382812 753.890625 C 850.398438 775.5 854.960938 798.050781 871.722656 816.570312 C 899.640625 847.410156 938.242188 862.320312 971.921875 885.019531 C 988.035156 895.878906 1003.25 910 1016.089844 924.589844 C 1034.628906 945.660156 1043.910156 974.058594 1049.429688 1001.03125 C 1050.25 1005.058594 1050.949219 1015.988281 1052.859375 1019.058594 C 1054.820312 1022.210938 1065.949219 1027.660156 1069.421875 1030.050781 C 1079.128906 1036.761719 1088.488281 1044.5 1097.539062 1052.070312 C 1120.070312 1070.949219 1141.289062 1094.570312 1156.160156 1119.921875 C 1190.210938 1177.910156 1198.050781 1242.300781 1179.109375 1306.921875 C 1174.5 1322.648438 1167.171875 1337.320312 1161.929688 1352.789062 C 1159.039062 1361.351562 1157.398438 1370.738281 1155.089844 1379.519531 C 1165.230469 1420.839844 1202.339844 1463.230469 1234.539062 1489.339844 L 1251.539062 1446.230469 C 1260.421875 1426.171875 1273.820312 1405.878906 1286.859375 1388.179688 C 1301.488281 1368.328125 1319.140625 1350.441406 1335.53125 1332.101562 C 1361.660156 1302.859375 1385.980469 1272.871094 1406.300781 1239.261719 C 1412.429688 1229.109375 1419.171875 1219.328125 1423.339844 1208.160156 C 1402.539062 1193.410156 1380.710938 1191.261719 1356.789062 1184.53125 C 1334.691406 1178.320312 1312.839844 1167.410156 1294.789062 1153.261719 C 1251.679688 1119.460938 1232.550781 1072.390625 1224.171875 1019.558594 C 1216.890625 973.578125 1215.140625 928.730469 1192.808594 886.589844 C 1186.25 874.210938 1174.820312 862.910156 1166.261719 851.738281 C 1201.210938 850.570312 1238.339844 857.371094 1272.101562 865.71875 C 1301.390625 872.949219 1330.058594 881.53125 1357.140625 895.039062 C 1413.378906 923.101562 1457.328125 967.878906 1477.171875 1028.210938 C 1483.820312 1048.441406 1487.378906 1070.871094 1489.929688 1091.980469 C 1495.269531 1136.058594 1496.140625 1182.671875 1484.910156 1225.96875 C 1478.761719 1249.660156 1468.289062 1272.339844 1457.339844 1294.121094 C 1435.308594 1337.730469 1405.789062 1376.621094 1383.289062 1419.910156 C 1359.441406 1465.789062 1345.808594 1518.519531 1350.730469 1570.410156 C 1351.910156 1582.878906 1355.988281 1595.019531 1357.96875 1607.371094 C 1319.550781 1566.261719 1276.011719 1526.410156 1228.480469 1496.019531 C 1200.128906 1477.890625 1169.761719 1462.359375 1142.128906 1443.269531 C 1128.210938 1433.648438 1114.820312 1422.53125 1101.558594 1412 C 1093.441406 1405.550781 1086.371094 1398.78125 1077.050781 1393.96875 C 1036.429688 1373.03125 989.175781 1366.890625 953.085938 1337.191406 C 904.878906 1297.519531 882.050781 1235.609375 839.957031 1190.359375 C 798.375 1145.671875 739.707031 1103.730469 678.4375 1092.550781 C 667.796875 1090.601562 656.265625 1090.710938 645.453125 1090.289062 C 649.902344 1084.808594 654.339844 1079.96875 660.179688 1075.929688 C 675.546875 1065.300781 693.09375 1057.25 709.894531 1049.210938 C 780.613281 1015.339844 863.585938 990.230469 942.625 991.769531 C 967.535156 992.25 993.023438 998.050781 1017.339844 1003.140625 L 1017.449219 1001.070312 C 1016.960938 990.808594 1013.039062 979.730469 1009.441406 970.199219 C 1000.589844 946.730469 990.394531 927.789062 970.683594 911.660156 C 950.988281 895.53125 927.566406 882.78125 901.753906 881.820312 C 888.808594 881.328125 874.644531 882.570312 862.449219 887.328125 C 832.734375 898.921875 811.449219 930.359375 777.164062 933.21875 C 764.492188 934.28125 752.269531 934.710938 739.660156 932.480469 C 676.527344 921.308594 633.710938 880.058594 606.25 824.019531 C 596.242188 803.609375 588.75 782.03125 577.738281 762.011719 C 573.917969 755.058594 570.003906 747.53125 565.226562 741.179688 C 558.65625 732.429688 550.671875 725.289062 544.339844 716.148438 C 578.390625 716.929688 611.421875 723.53125 645.8125 722.148438 C 682.585938 720.679688 718.175781 711.589844 755.042969 709.601562 Z M 755.042969 709.601562 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 2260.210938 709.621094 C 2304.609375 707.988281 2348.960938 716.761719 2393.558594 716.628906 C 2404.320312 716.609375 2415.21875 716.390625 2425.929688 715.25 C 2433.148438 714.480469 2448.53125 711.058594 2454.539062 715.21875 L 2453.871094 716.828125 C 2450.78125 722.640625 2443.738281 728.03125 2439.121094 732.769531 C 2432.730469 739.328125 2427.449219 746.550781 2423.089844 754.601562 C 2407.640625 783.121094 2397.558594 814.839844 2381.679688 843.019531 C 2361.820312 878.261719 2332.558594 904.640625 2294.488281 918.960938 C 2266.21875 929.589844 2233.96875 929.730469 2206.390625 917.070312 C 2188.511719 908.859375 2172.289062 897.320312 2154.269531 889.128906 C 2129.25 877.769531 2092.320312 876.308594 2066.53125 886.761719 C 2020.828125 905.289062 1994.460938 948.550781 1975.828125 991.628906 C 2015.410156 979.210938 2058.988281 977.429688 2100.078125 980.039062 C 2175.449219 984.820312 2242.378906 1013.679688 2307.808594 1049.039062 C 2327.28125 1059.558594 2348.210938 1068.820312 2363 1085.589844 C 2287.789062 1092.691406 2219.101562 1115.570312 2166.191406 1172.070312 C 2142.289062 1197.578125 2122.769531 1227.078125 2102.988281 1255.789062 C 2082.570312 1285.441406 2063.5 1313.890625 2034.269531 1335.621094 C 2002.289062 1359.390625 1969.621094 1368.429688 1931.320312 1377.289062 C 1917.140625 1380.570312 1902.058594 1383.140625 1889.21875 1390.28125 C 1871.300781 1400.230469 1860.859375 1415.089844 1848.101562 1430.539062 C 1838.660156 1441.960938 1828.941406 1452.398438 1817.761719 1462.179688 C 1793.921875 1483.050781 1767.621094 1498.351562 1742.609375 1517.328125 C 1709.160156 1542.699219 1677.628906 1572.609375 1647.550781 1601.859375 C 1647.710938 1592.28125 1651.089844 1582.019531 1652.621094 1572.46875 C 1654.800781 1558.941406 1655.25 1544.449219 1654.75 1530.761719 C 1653.601562 1499.269531 1647.53125 1466.019531 1636.808594 1436.339844 C 1615.960938 1378.558594 1579.730469 1327.019531 1552.5 1272.191406 C 1546.339844 1259.808594 1541.890625 1246.488281 1536.691406 1233.671875 C 1529.519531 1211.75 1521.519531 1188.761719 1516.429688 1166.328125 C 1505.820312 1119.441406 1504.160156 1070.328125 1506.109375 1022.460938 C 1507.210938 995.378906 1508.261719 965.039062 1515.25 938.738281 C 1525.050781 901.859375 1550.449219 868.871094 1578.199219 843.640625 C 1616.488281 808.820312 1661.558594 791.949219 1710.328125 777.878906 C 1748.398438 766.898438 1790.199219 758.511719 1829.921875 760.371094 C 1813.429688 779.21875 1800.398438 799.820312 1791.410156 823.199219 C 1764.96875 892.03125 1768.910156 976.609375 1713.808594 1032.078125 C 1688.789062 1057.261719 1656.761719 1073.289062 1622.589844 1081.808594 C 1611.398438 1084.601562 1598.488281 1083.949219 1587.890625 1088.269531 C 1581.578125 1090.839844 1576.789062 1095.320312 1571.828125 1099.839844 C 1572.46875 1112.890625 1578.429688 1124.71875 1583.710938 1136.421875 C 1609.691406 1194.019531 1651.078125 1243.121094 1690.25 1292.160156 C 1705.929688 1311.800781 1721.96875 1330.671875 1735.71875 1351.800781 C 1757.859375 1385.828125 1771.128906 1420.21875 1785.140625 1457.960938 C 1800.96875 1434.949219 1822.148438 1415.308594 1834.910156 1390.25 C 1836.691406 1386.75 1840.078125 1381.359375 1840.921875 1377.621094 C 1843.539062 1365.929688 1834.808594 1348.410156 1830.730469 1337.730469 C 1825.671875 1324.460938 1820.429688 1310.878906 1816.941406 1297.121094 C 1805.660156 1252.738281 1805.5 1201.390625 1819.140625 1157.460938 C 1839.371094 1092.289062 1886.441406 1037.199219 1946.660156 1005.691406 L 1948.859375 997.800781 C 1959.300781 962.390625 1982.300781 934.019531 2007.660156 908.148438 C 2022.46875 893.039062 2038.550781 877.960938 2057.371094 867.878906 C 2085.359375 852.898438 2122.96875 830.371094 2140.039062 802.820312 C 2151.289062 784.640625 2159.949219 766.140625 2174.128906 749.871094 C 2197.300781 723.28125 2225.398438 711.949219 2260.210938 709.621094 Z M 2260.210938 709.621094 "/>
<path fill-rule="nonzero" fill="rgb(0%, 0%, 0%)" fill-opacity="0.05" d="M 2521.300781 1018.691406 C 2565.761719 1017.839844 2609.859375 1022.070312 2653.820312 1028.628906 C 2671.519531 1031.269531 2688.628906 1035.871094 2706.480469 1037.628906 C 2698.179688 1044.53125 2689.039062 1050.519531 2681.140625 1057.859375 C 2664.238281 1073.558594 2648.769531 1093.179688 2635.730469 1112.199219 C 2623.929688 1129.378906 2614.890625 1149.339844 2604.589844 1167.480469 C 2582.878906 1205.710938 2555.179688 1239.78125 2511.621094 1253.339844 C 2460.179688 1269.359375 2404.890625 1251.410156 2359.070312 1227.71875 C 2356.359375 1231.480469 2355.289062 1237.699219 2353.839844 1242.128906 L 2342.011719 1274.949219 C 2321.160156 1325.691406 2293.589844 1374.519531 2257.5 1416.191406 C 2249.78125 1425.109375 2240.699219 1432.960938 2232.050781 1440.949219 C 2208.988281 1462.230469 2182.28125 1483.148438 2153.558594 1496.210938 C 2134.320312 1504.949219 2114.128906 1510.179688 2094.230469 1516.949219 L 2008.941406 1549.230469 C 1945.800781 1576.421875 1889.921875 1613.988281 1840.929688 1662.21875 C 1795.269531 1707.160156 1757.039062 1762.128906 1730.941406 1820.53125 C 1726.121094 1831.339844 1719.199219 1844.820312 1719.039062 1856.871094 L 1775.558594 1821.53125 C 1829.730469 1792.929688 1892.460938 1771.171875 1954.101562 1767.820312 C 2004.089844 1765.089844 2054.339844 1773.738281 2102.050781 1788.378906 C 2110.539062 1790.988281 2117.699219 1795.320312 2125.320312 1799.78125 C 2136.859375 1794.628906 2147.589844 1787.75 2159.050781 1782.390625 C 2195.089844 1765.558594 2235.359375 1753.390625 2274.738281 1748.160156 C 2287.140625 1746.511719 2298.808594 1745.820312 2311.308594 1745.890625 C 2317.371094 1745.929688 2328.96875 1747.648438 2334.480469 1746.121094 C 2334.539062 1746.109375 2336.609375 1743.429688 2336.660156 1743.371094 C 2346.289062 1730.789062 2353.191406 1716.25 2362.371094 1703.359375 C 2383.039062 1674.351562 2411.578125 1654.261719 2447.570312 1650.648438 C 2476.859375 1647.710938 2502.691406 1654.839844 2529.261719 1666.121094 C 2541.398438 1671.28125 2553.871094 1677.480469 2566.730469 1680.550781 C 2587.210938 1685.441406 2608.628906 1683.730469 2628.820312 1678.28125 L 2630.390625 1677.839844 L 2610.539062 1720.640625 C 2594.289062 1752.050781 2570.96875 1783.378906 2541.011719 1802.878906 C 2518.109375 1817.800781 2484.410156 1833.738281 2456.28125 1827.339844 L 2454.339844 1826.859375 C 2412.820312 1816.769531 2385.070312 1781.210938 2342.46875 1774.371094 C 2289.230469 1765.820312 2241.488281 1782.210938 2192.871094 1801.640625 C 2175.851562 1808.441406 2159.480469 1814.398438 2144.460938 1825.210938 C 2153 1828.511719 2162.210938 1832.871094 2171.179688 1834.71875 C 2199.878906 1840.609375 2221.738281 1827.710938 2244.371094 1811.640625 C 2257.398438 1802.398438 2269.351562 1794.910156 2285.011719 1790.761719 C 2314.710938 1782.898438 2347.050781 1789.96875 2370.730469 1809.488281 C 2380.441406 1817.5 2388.46875 1827.769531 2396.71875 1837.230469 C 2410.390625 1852.910156 2424.449219 1868.960938 2440.328125 1882.511719 C 2447.109375 1888.289062 2455.46875 1892.558594 2463.128906 1897.039062 C 2478.101562 1905.769531 2501.570312 1914.898438 2519.109375 1915.898438 C 2527.050781 1916.359375 2535.148438 1914.980469 2543.011719 1913.941406 C 2508.070312 1942.320312 2472.710938 1971.21875 2431.199219 1989.5 C 2397.789062 2004.210938 2362.449219 2012.035156 2325.949219 2011.308594 C 2310.929688 2011.007812 2294.949219 2009.492188 2280.910156 2003.796875 C 2234.070312 1984.820312 2213.789062 1949.628906 2195.128906 1905.109375 C 2190.421875 1893.871094 2184.128906 1880.839844 2175.121094 1872.429688 C 2171.058594 1868.648438 2165.839844 1866.578125 2161.199219 1863.648438 C 2156.609375 1860.738281 2151.570312 1856.710938 2146.449219 1854.878906 C 2143.398438 1853.789062 2139.851562 1853.25 2136.660156 1852.660156 C 2131.429688 1851.710938 2125.648438 1850.570312 2120.359375 1851.320312 C 2110.589844 1852.71875 2099.96875 1859.378906 2091.871094 1864.699219 C 2072.921875 1877.128906 2054.351562 1894.929688 2032.589844 1902.261719 C 2019.949219 1906.519531 2005.949219 1905.578125 1992.921875 1904.160156 C 1975.109375 1902.230469 1957.800781 1897.820312 1940.128906 1895.210938 C 1904.851562 1889.988281 1871.519531 1894.570312 1839.671875 1911.089844 C 1773 1945.660156 1714.660156 2011.09375 1692.390625 2083.226562 C 1684.289062 2109.496094 1682.230469 2136.394531 1682.691406 2163.757812 C 1684.039062 2243.175781 1711.828125 2321.960938 1749.289062 2391.289062 C 1802.5 2489.761719 1889.269531 2571.992188 1987.46875 2624.875 C 2005.949219 2634.828125 2025.058594 2645.675781 2045.238281 2651.632812 C 2050.609375 2653.214844 2056.191406 2654.9375 2059.039062 2660.15625 C 2054.328125 2665.429688 1962.070312 2676.792969 1946.691406 2679.484375 C 1858.480469 2694.90625 1764.949219 2715.617188 1681.621094 2748.9375 C 1614.78125 2775.664062 1549.878906 2811.78125 1500.660156 2865.078125 C 1491.128906 2858.414062 1483.898438 2848.839844 1475.109375 2841.222656 C 1458.5 2826.824219 1440.980469 2814.042969 1422.578125 2802.054688 C 1389.539062 2780.535156 1353.039062 2764.695312 1316.421875 2750.390625 C 1237.878906 2719.714844 1155.230469 2698.171875 1072.378906 2682.558594 L 1008.960938 2671.277344 L 970.507812 2666.117188 C 961.769531 2665.140625 950.566406 2665.597656 942.996094 2660.890625 L 942.625 2658.375 C 948.765625 2653.226562 956.550781 2651.441406 963.867188 2648.445312 L 999.34375 2632.253906 C 1059.691406 2602.785156 1115.390625 2566.078125 1162.441406 2517.714844 C 1190.539062 2488.84375 1214.148438 2457.871094 1235.171875 2423.585938 C 1240.078125 2415.574219 1245.75 2407.933594 1250.160156 2399.621094 L 1270.460938 2356.257812 C 1297.539062 2298.078125 1318.550781 2230.566406 1316.859375 2165.773438 C 1314.628906 2079.746094 1276.570312 2010.910156 1214.96875 1952.941406 L 1197.949219 1939.351562 C 1163.558594 1913.148438 1117.289062 1891.070312 1073.210938 1892.691406 C 1055.601562 1893.328125 1038.191406 1897.539062 1020.941406 1900.820312 C 1004.761719 1903.890625 986.265625 1908.308594 969.816406 1904.621094 C 942.976562 1898.578125 918.871094 1874.851562 895.058594 1861.511719 C 884.886719 1855.808594 872.707031 1850.53125 860.839844 1852.621094 C 853.585938 1853.910156 846.128906 1858.03125 839.828125 1861.839844 C 803.542969 1883.839844 799.949219 1924.460938 776.382812 1956.070312 C 752.710938 1987.808594 724.507812 2005.078125 685.546875 2011.414062 C 676.117188 2012.945312 666.824219 2012.914062 657.304688 2012.855469 C 576.144531 2012.34375 510.214844 1969.988281 454.820312 1914.03125 C 509.359375 1923.890625 558.246094 1888.191406 592.210938 1849.539062 C 607.839844 1831.75 622.527344 1809.5 644.160156 1798.871094 C 678.472656 1782.011719 716.757812 1786.140625 748.265625 1806.871094 C 762.835938 1816.449219 776.3125 1828.28125 793.195312 1833.648438 C 811.960938 1839.621094 835.246094 1832.050781 851.90625 1823.441406 C 825.4375 1804.410156 790.417969 1790.589844 759.273438 1781.488281 C 718.71875 1769.660156 664.820312 1766.21875 624.960938 1783.101562 C 611.363281 1788.859375 598.597656 1797.960938 585.539062 1804.949219 C 552.707031 1822.53125 522.863281 1829.460938 486.449219 1818.121094 C 441.097656 1803.988281 404.960938 1759.898438 383.523438 1719.140625 C 376.566406 1705.921875 371.875 1691.691406 364.789062 1678.339844 C 387.996094 1686.820312 411.847656 1686.148438 435.246094 1678.058594 C 453.941406 1671.589844 470.996094 1661.691406 489.992188 1655.75 C 546.90625 1637.910156 603.390625 1657 635.78125 1707.269531 C 641.636719 1716.359375 650.804688 1738.378906 659.910156 1743.820312 C 664.035156 1746.289062 670.554688 1745.859375 675.199219 1745.910156 L 705.480469 1746.199219 C 715.011719 1746.539062 724.550781 1747.980469 733.949219 1749.570312 C 767.570312 1755.230469 802.628906 1763.378906 833.71875 1777.710938 C 846.320312 1783.519531 858.445312 1791.339844 870.804688 1797.78125 L 889.816406 1789.609375 C 996.789062 1752.269531 1111.039062 1772.308594 1211.179688 1819.949219 C 1232.769531 1830.230469 1251.789062 1845.089844 1273.390625 1855.269531 L 1272.128906 1851.21875 C 1262.359375 1820.789062 1246.261719 1791.871094 1228.941406 1765.140625 C 1190.679688 1706.089844 1139.910156 1650.460938 1083.628906 1608.039062 C 1046.550781 1580.101562 1005.878906 1557.238281 963.835938 1537.691406 C 934.636719 1524.121094 903.5 1514.941406 873.492188 1503.441406 C 854.140625 1496.039062 835.457031 1487.039062 817.046875 1477.558594 C 793.734375 1465.558594 774.449219 1446.78125 757 1427.550781 C 726.976562 1394.460938 700.894531 1356.019531 682.53125 1315.238281 C 669.753906 1286.859375 661.152344 1257.960938 651.660156 1228.429688 C 623.300781 1239.761719 601.714844 1254.570312 570.46875 1258.609375 C 511.976562 1266.191406 457.4375 1240.019531 422.550781 1193.078125 C 404.855469 1169.28125 392.429688 1142.429688 373.328125 1119.539062 C 349.113281 1090.519531 319.183594 1069.75 289.523438 1046.921875 C 326.148438 1050.621094 358.917969 1047.558594 394.71875 1039.609375 C 448.6875 1027.628906 526.046875 1010.558594 576.414062 1040.179688 C 613.527344 1062.011719 628.816406 1107.378906 642.9375 1145.511719 C 653.300781 1173.488281 663.363281 1201.769531 677.207031 1228.25 C 697.050781 1266.21875 725.59375 1301.351562 759.417969 1327.828125 C 791.527344 1352.960938 826.535156 1371.871094 865.132812 1385.199219 C 924.097656 1405.558594 986.804688 1413.53125 1046 1432.601562 C 1080.628906 1443.761719 1114.808594 1456.109375 1147.148438 1472.929688 C 1175.410156 1487.640625 1201.539062 1505.558594 1228.230469 1522.800781 C 1262.019531 1544.621094 1293.078125 1571.660156 1321.53125 1599.929688 C 1349.078125 1627.308594 1375.378906 1656.089844 1397.339844 1688.230469 C 1433.089844 1740.570312 1457.570312 1801.429688 1474.488281 1862.269531 C 1483.871094 1895.980469 1487.148438 1930.53125 1494.378906 1964.558594 C 1516.210938 1844.488281 1557.171875 1730.589844 1640.410156 1638.820312 C 1658.859375 1618.480469 1679.21875 1600.820312 1699.570312 1582.519531 C 1742.148438 1544.21875 1787.761719 1510.550781 1838.378906 1483.800781 C 1844.378906 1480.628906 1849.96875 1476.589844 1856.089844 1473.628906 C 1877.199219 1463.441406 1900.679688 1455.351562 1922.761719 1447.570312 L 1977.648438 1428.710938 C 2064.328125 1402.53125 2158.53125 1391.421875 2232 1334.058594 C 2285.859375 1292.011719 2332.730469 1236.789062 2355.011719 1171.390625 C 2368.191406 1132.691406 2375.398438 1090.269531 2404.089844 1059.230469 C 2434.789062 1026.019531 2478.339844 1020.660156 2521.300781 1018.691406 Z M 2521.300781 1018.691406 "/>
</svg>`;

const TREE_BG_DATA_URL = `data:image/svg+xml;utf8,${encodeURIComponent(TREE_SVG)}`;

const RF_STYLE: React.CSSProperties = {
  backgroundColor: "var(--background)",
  backgroundRepeat: "no-repeat",
  backgroundImage: `radial-gradient(ellipse at center, rgba(0,0,0,0.03), transparent 65%), url("${TREE_BG_DATA_URL}")`,
  backgroundPosition: "center 18%",
  backgroundSize: "min(780px, 90%)",

};

  useEffect(() => {
    const t = setTimeout(() => fitView({ padding: 0.15 }), 0);    
    return () => clearTimeout(t);
  }, [nodes, edges, fitView]);

  return (
    <ReactFlow
      style={RF_STYLE}
      nodes={nodes}
      edges={edges}
      nodeTypes={nodeTypes}
      onNodeClick={(_, n) => onNodeClick(n.id)}
      fitView
      fitViewOptions={{ padding: 0.15 }}
      proOptions={{ hideAttribution: true }}
      panOnScroll
      selectionOnDrag={false}
      nodesDraggable={false}
      edgesFocusable={false}
      edgesUpdatable={false}
    >
      <Controls />
      <MiniMap />
    </ReactFlow>
  );
}

/* ---------- Page ---------- */
export default function TreeClient() {
  const [rawNodes, setRawNodes] = useState<GNode[]>([]);
  const [rawEdges, setRawEdges] = useState<GEdge[]>([]);
  const [selected, setSelected] = useState<string>("");

  // highlight state
  const [hiNodes, setHiNodes] = useState<Set<string>>(new Set());
  const [hiEdges, setHiEdges] = useState<Set<string>>(new Set());

  // relationship compute
  const [pick, setPick] = useState<"A" | "B">("A");
  const [a, setA] = useState("");
  const [b, setB] = useState("");
  const [rel, setRel] = useState("");

  // "Me"
  const [myId, setMyId] = useState<string | null>(null);

  // Filters / modes
  const [viewKind, setViewKind] = useState<ViewKind>("BIOLOGICAL");
  const [viewMode, setViewMode] = useState<ViewMode>("GRAPH");
  const [side, setSide] = useState<Side>("BOTH");

  useEffect(() => {
    (async () => {
      const [graphRes, meRes] = await Promise.all([
        fetch("/api/family/graph", { cache: "no-store" }),
        fetch("/api/family/me", { cache: "no-store" }),
      ]);
      const graph = await graphRes.json();
      setRawNodes(graph.nodes as GNode[]);
      setRawEdges((graph.edges as GEdge[]).filter((e) => e.type === "parent"));
      if (meRes.ok) {
        const me = await meRes.json();
        if (me?.personId) setMyId(me.personId as string);
      }
    })();
  }, []);

  const options = useMemo(
    () => [...rawNodes].sort((x, y) => x.label.localeCompare(y.label)).map((n) => ({ id: n.id, label: n.label })),
    [rawNodes]
  );

  // Whāngai-first fallback selection
  const visibleParentEdges = useMemo(() => selectEdgesForView(rawEdges, viewKind), [rawEdges, viewKind]);

  // Build maps from *visible* edges so lineage/ancestors respect the current selection
  const { parentsOf } = useMemo(() => buildMaps(visibleParentEdges), [visibleParentEdges]);
  const parentsOfKindAware = useMemo(() => buildParentsMapKindAware(visibleParentEdges), [visibleParentEdges]);

  function highlight(which: "MOTHER" | "FATHER") {
    const start = selected || myId;
    if (!start) {
      toast.info("Select a person (or link 'Me' in your account) to highlight.");
      return;
    }
    const path = walkLineage(start, parentsOf, which);
    setHiNodes(path.nodes);
    setHiEdges(path.edges);
  }
  function clearHighlight() {
    setHiNodes(new Set());
    setHiEdges(new Set());
  }

  // Ancestors-only filter (build subgraph for selected/me)
  const ancestorFilter = useMemo(() => {
    if (viewMode !== "ANCESTORS") return null;
    const focus = selected || myId;
    if (!focus) return { nodes: new Set<string>(), edges: new Set<string>() };

    const sets = [];
    if (side === "MATERNAL" || side === "BOTH") sets.push(ascendLine(focus, parentsOfKindAware, "MOTHER"));
    if (side === "PATERNAL" || side === "BOTH") sets.push(ascendLine(focus, parentsOfKindAware, "FATHER"));

    const nodes = new Set<string>();
    const edges = new Set<string>();
    for (const s of sets) {
      s.nodes.forEach((n) => nodes.add(n));
      s.edges.forEach((e) => edges.add(e));
    }
    nodes.add(focus); // ensure focus visible
    return { nodes, edges };
  }, [viewMode, side, selected, myId, parentsOfKindAware]);

  const rfNodes: Node[] = useMemo(() => {
    const allNodes: Node[] = rawNodes.map((n) => ({
      id: n.id,
      type: "person",
      data: { ...n, isMe: myId === n.id, highlighted: hiNodes.has(n.id) },
      position: { x: 0, y: 0 },
    }));

    // Edges are made with helper (to ensure identical styles)
    const allEdges = makeEdges(visibleParentEdges, hiEdges);

    if (viewMode === "ANCESTORS" && ancestorFilter) {
      const { nodes, edges } = ancestorFilter;
      const fn = allNodes.filter((n) => nodes.has(n.id));
      const fe = makeEdges(visibleParentEdges, hiEdges, { edges });
      return layoutGraph(fn, fe);
    }

    return layoutGraph(allNodes, allEdges);
  }, [rawNodes, visibleParentEdges, hiNodes, hiEdges, myId, viewMode, ancestorFilter]);

  const rfEdges: Edge[] = useMemo(
    () => makeEdges(visibleParentEdges, hiEdges, viewMode === "ANCESTORS" ? ancestorFilter ?? undefined : undefined),
    [visibleParentEdges, hiEdges, viewMode, ancestorFilter]
  );

  async function computeRel() {
    if (!a || !b) return;
    const res = await fetch(`/api/family/relationship?a=${a}&b=${b}`);
    const data = await res.json();
    setRel(res.ok ? data.label : "unknown");
  }

  function onNodeClick(id: string) {
    setSelected(id);
    if (pick === "A") {
      setA(id);
      setPick("B");
      toast.info("Selected A; now pick B");
    } else {
      setB(id);
      setPick("A");
      toast.info("Selected B; press Compute");
    }
  }

  return (
    <div className="grid gap-4">
      {/* Toolbar */}
      <div className="card p-4 flex flex-wrap items-end gap-3">
        <div className="flex flex-col">
          <label className="text-xs  mb-1">Person</label>
          <div className="flex gap-2">
            <select className="input min-w-56" value={selected} onChange={(e) => setSelected(e.target.value)}>
              <option value="">{myId ? "— Use 'Me' by default —" : "— Select —"}</option>
              {options.map((o) => (
                <option key={o.id} value={o.id}>
                  {o.label}
                </option>
              ))}
            </select>
            {myId && (
              <button className="btn" onClick={() => setSelected(myId!)}>
                Use Me
              </button>
            )}
          </div>
        </div>

        <div className="flex gap-2 items-end">
          <button className="btn" onClick={() => highlight("MOTHER")}>
            Highlight maternal line
          </button>
          <button className="btn" onClick={() => highlight("FATHER")}>
            Highlight paternal line
          </button>
          <button className="btn" onClick={clearHighlight}>
            Clear
          </button>
        </div>

      {/* Mode toggle */}
<div className="ml-auto flex items-center gap-2">
  <span className="text-xs ">Mode</span>

  <div className="inline-flex rounded-lg border overflow-hidden segmented">
    {(["GRAPH", "ANCESTORS"] as ViewMode[]).map((m) => (
      <button
        key={m}
        onClick={() => setViewMode(m)}
        className={`seg-btn ${viewMode === m ? "is-active" : ""}`}
      >
        {m === "GRAPH" ? "Full graph" : "Ancestors only"}
      </button>
    ))}
  </div>

  {viewMode === "ANCESTORS" && (
    <div className="inline-flex rounded-lg border overflow-hidden segmented">
      {(["MATERNAL", "PATERNAL", "BOTH"] as Side[]).map((s) => (
        <button
          key={s}
          onClick={() => setSide(s)}
          className={`seg-btn ${side === s ? "is-active" : ""}`}
        >
          {s === "MATERNAL" ? "Maternal" : s === "PATERNAL" ? "Paternal" : "Both"}
        </button>
      ))}
    </div>
  )}
</div>

        {/* Kind filter (segmented) + Legend */}
      <div className="flex items-center gap-2">
  <span className="text-xs ">Show</span>

  <div className="inline-flex rounded-lg border overflow-hidden segmented">
    {(["BIOLOGICAL", "WHANGAI", "ALL"] as ViewKind[]).map((k) => {
      const tintClass =
        k === "BIOLOGICAL" ? "edge-text--bio" :
        k === "WHANGAI"    ? "edge-text--whangai" :
                             "edge-text--all";
      const active = viewKind === k;
      return (
        <button
          key={k}
          onClick={() => setViewKind(k)}
          className={`seg-btn ${active ? "is-active" : tintClass}`}
        >
          {k === "BIOLOGICAL" ? "Biological" : k === "WHANGAI" ? "Whāngai" : "All"}
        </button>
      );
    })}
  </div>

        <div className="hidden sm:flex items-center gap-4 text-xs  ml-3">
    <span className="inline-flex items-center gap-1">
      <span className="inline-block w-2.5 h-2.5 rounded-full" style={{ background: COLOR.gender.MALE }} /> Male
    </span>
    <span className="inline-flex items-center gap-1">
      <span className="inline-block w-2.5 h-2.5 rounded-full" style={{ background: COLOR.gender.FEMALE }} /> Female
    </span>
    <span className="inline-flex items-center gap-1">
      <span className="inline-block w-2.5 h-2.5 rounded-full" style={{ background: COLOR.gender.OTHER }} /> Other/Unknown
    </span>
    <span className="inline-flex items-center gap-1">
      <span className="inline-block w-5 h-[2px]" style={{ background: COLOR.edge.biological }} /> Biological
    </span>
    <span className="inline-flex items-center gap-1">
      <span className="inline-block w-5 h-[2px] border-t border-dashed" style={{ borderColor: COLOR.edge.whangai }} /> Whāngai
    </span>
    <span className="inline-flex items-center gap-1">
      <span className="inline-block w-5 h-[2px]" style={{ background: COLOR.edge.highlight }} /> Highlight
    </span>
  </div>
</div>
      </div>

      {/* Relationship compute */}
      <div className="card p-4 flex flex-wrap items-end gap-3">
        <div className="text-sm ">
          Click nodes to pick <span className="font-semibold">A</span> then <span className="font-semibold">B</span>, or choose below:
        </div>
        <select className="input min-w-56" value={a} onChange={(e) => setA(e.target.value)}>
          <option value="">A — Select</option>
          {options.map((o) => (
            <option key={o.id} value={o.id}>
              {o.label}
            </option>
          ))}
        </select>
        <select className="input min-w-56" value={b} onChange={(e) => setB(e.target.value)}>
          <option value="">B — Select</option>
          {options.map((o) => (
            <option key={o.id} value={o.id}>
              {o.label}
            </option>
          ))}
        </select>
        <button className="btn btn-primary" onClick={computeRel} disabled={!a || !b}>
          Compute
        </button>
        {rel && (
          <div className="text-sm ">
            Result: <strong>{rel}</strong>
          </div>
        )}
        <div className="ml-auto text-xs ">
          Picking: <strong>{pick}</strong> These are approximations and may not reflect the actual relationship of the people selected
        </div>
      </div>

      {/* Canvas */}
      <div className="card p-2 h-[78vh]">
        <ReactFlowProvider>
          <GraphCanvas nodes={rfNodes} edges={rfEdges} onNodeClick={onNodeClick} />
        </ReactFlowProvider>
      </div>
    </div>
  );
}
