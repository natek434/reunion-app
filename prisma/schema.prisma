generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  EDITOR
  MEMBER
}

model GalleryItem {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  driveFileId String
  mimeType    String
  name        String
  size        Int?
  webViewLink String?
  createdAt   DateTime    @default(now())
  AlbumItem   AlbumItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String          @id @default(cuid())
  title       String
  start       DateTime
  end         DateTime
  timezone    String          @default("Pacific/Auckland")
  location    String
  address     String?
  description String?
  items       ItineraryItem[]
  rsvps       RSVP[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItineraryItem {
  id        String    @id @default(cuid())
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  title     String
  start     DateTime
  end       DateTime?
  location  String?
  notes     String?
  category  String? // e.g. "meal", "activity", "travel"
  createdAt DateTime  @default(now())
}

model RSVP {
  id        String     @id @default(cuid())
  eventId   String
  userId    String
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    RSVPStatus @default(PENDING)
  guests    Int        @default(0)
  note      String?
  updatedAt DateTime   @updatedAt

  @@unique([eventId, userId])
}

enum RSVPStatus {
  PENDING
  YES
  NO
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum ParentKind {
  BIOLOGICAL
  WHANGAI
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  bio           String?
  role          Role          @default(MEMBER)
  personId      String?       @unique
  person        Person?       @relation("UserPerson", fields: [personId], references: [id], onDelete: SetNull)
  peopleCreated Person[]      @relation("PersonCreatedBy")
  accounts      Account[]
  sessions      Session[]
  gallery       GalleryItem[]
  rsvps         RSVP[]
  Album         Album[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Person {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  displayName String?
  gender      Gender        @default(UNKNOWN)
  birthDate   DateTime?
  deathDate   DateTime?
  notes       String?
  imageUrl    String?
  locked      Boolean       @default(false)
  createdById String
  createdBy   User          @relation("PersonCreatedBy", fields: [createdById], references: [id])
  deletedAt   DateTime?
  parents     ParentChild[] @relation("PC_child")
  children    ParentChild[] @relation("PC_parent")
  user        User?         @relation("UserPerson")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([lastName, firstName])
  @@index([deletedAt])
}

model ParentChild {
  id        String     @id @default(cuid())
  parentId  String
  childId   String
  parent    Person     @relation("PC_parent", fields: [parentId], references: [id], onDelete: Cascade)
  child     Person     @relation("PC_child", fields: [childId], references: [id], onDelete: Cascade)
  role      ParentRole
  kind      ParentKind @default(BIOLOGICAL) // <-- NEW
  createdAt DateTime   @default(now())

  // prevent duplicates
  @@unique([parentId, childId, kind]) // allow same parent twice only if kind differs
  @@unique([childId, kind, role]) // <= ensures at most one MOTHER/FATHER per kind
  @@index([parentId])
  @@index([childId])
}

enum ParentRole {
  MOTHER
  FATHER
  PARENT
}

model AlbumItem {
  id            String      @id @default(cuid())
  albumId       String
  galleryItemId String
  order         Int         @default(0)
  album         Album       @relation(fields: [albumId], references: [id], onDelete: Cascade)
  media         GalleryItem @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)

  @@unique([albumId, galleryItemId])
  @@index([albumId])
  @@index([galleryItemId])
}

model Album {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
  items       AlbumItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
